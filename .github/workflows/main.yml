name: TeamCity Tests

on: push

jobs:
  run_teamcity_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'zulu'

      - name: Give execute permission for Maven Wrapper
        run: chmod +x ./mvnw

      - name: Install ifconfig
        run: sudo apt-get update && sudo apt-get install -y net-tools

      - name: Set up host environment variables
        run: |
          HOST=$(ifconfig | grep -E '([0-9]{1,3}\.){3}[0-9]{1,3}' | grep -v 127.0.0.1 | awk '{print $2}' | head -n1)
          echo "HOST=$HOST" >> $GITHUB_ENV
          echo "Host IP: $HOST"

      - name: Setup host config.properties
        run: |
          echo "host=${{ env.HOST }}:8111" >> src/main/resources/config.properties
          echo "Host config.properties set to: ${{ env.HOST }}:8111"

      - name: Pull Selenoid Firefox/Chrome
        run: docker pull selenoid/vnc_chrome:119.0

      - name: Remove existing containers
        run: |
          docker rm -f selenoid || true
          docker rm -f selenoid-ui || true
          docker rm -f teamcity-server || true
          docker rm -f teamcity-agent || true

      - name: Run Selenoid
        run: |
          docker run -d --name selenoid \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd)/config/:/etc/selenoid/:ro \
          -p 4444:4444 \
          aerokube/selenoid

      - name: Run Selenoid UI
        run: |
          docker run -d --name selenoid-ui \
          -p 8080:8080 \
          aerokube/selenoid-ui \
          --selenoid-uri http://${{ env.HOST }}:4444

      - name: Run TeamCity Server
        run: |
          docker run -u 0 -d --name teamcity-server \
          -v $(pwd)/tmp/teamcity_server/datadir:/data/teamcity_server/datadir \
          -v $(pwd)/tmp/teamcity_server/logs:/opt/teamcity/logs \
          -p 8111:8111 \
          jetbrains/teamcity-server:2023.11.1

      - name: Wait for TeamCity to initialize
        run: sleep 900

      - name: Setup TeamCity Server Test
        run: ./mvnw clean test -Dtest=SetupTest#startUpTest

      - name: Check TeamCity logs
        run: docker logs teamcity-server

      - name: Setup superUserToken environment variable
        run: |
          SUPER_USER_TOKEN=$(docker logs teamcity-server | grep 'Super user authentication token:' | tail -n 1 | awk '{print $6}')
          echo "SUPER_USER_TOKEN=$SUPER_USER_TOKEN"
          echo "SUPER_USER_TOKEN=$SUPER_USER_TOKEN" >> $GITHUB_ENV
          if [ -z "$SUPER_USER_TOKEN" ]; then
            echo "Super user token not found!"
            exit 1
          fi

      - name: Setup superUserToken config property
        run: |
          echo "superUserToken=${{ env.SUPER_USER_TOKEN }}" >> src/main/resources/config.properties
          echo "Super user token config property set to: ${{ env.SUPER_USER_TOKEN }}"

      - name: Run TeamCity agent
        run: |
          docker run -e SERVER_URL=http://${{ env.HOST }}:8111 -u 0 -d --name teamcity-agent \
          -v $(pwd)/tmp/teamcity_agent/conf:/data/teamcity_agent/conf \
          jetbrains/teamcity-agent:2023.11.1

      - name: Run API tests
        run: ./mvnw clean test -Dsurefire.suiteXmlFiles=testng-suites/api-suite.xml

      - name: Run UI tests
        run: ./mvnw clean test -Dsurefire.suiteXmlFiles=testng-suites/ui-suite.xml

      - name: Load test report history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: target/allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: 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
          publish_branch: gh-pages
          publish_dir: allure-history

      - name: Run Swagger coverage
        if: always()
        run: .swagger-coverage-commandline/bin/swagger-coverage-commandline -s http://$HOST:8111/app/rest/swagger.json -i target/swagger-coverage-output

      - name: Save Swagger coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: swagger-coverage
          path: |
            swagger-coverage-report.html
            swagger-coverage-results.json